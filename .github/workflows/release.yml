name: Release on merge to main

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
            ref: main
            fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Compute monthly version (YY.M.N)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          YEAR=$(date -u +%y)
          MONTH=$(date -u +%-m 2>/dev/null || true)
          if [ -z "$MONTH" ]; then
            MONTH=$(date -u +%m | sed 's/^0//')
          fi
            # Gather existing tags for this month in dot format: YY.M.*
          TAGS=$(git tag -l "${YEAR}.${MONTH}.*" || true)
          if [ -n "$TAGS" ]; then
            MAX=$(echo "$TAGS" | awk -F'.' '{print $3}' | sort -n | tail -n1)
            NEXT=$((MAX + 1))
          else
            NEXT=0
          fi
          VERSION="${YEAR}.${MONTH}.${NEXT}"
          echo "Computed version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Create tag (no version commit)
        env:
          VERSION: ${{ steps.ver.outputs.version }}
        run: |
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists."
          else
            git tag -a "$VERSION" -m "Release $VERSION"
            git push origin "$VERSION"
          fi

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.ver.outputs.version }}
        run: |
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "Release $VERSION already exists."
          else
            gh release create "$VERSION" \
              --title "Potential Potato $VERSION" \
              --notes "Automated release $VERSION" \
              --verify-tag
          fi

  build-linux:
    name: Build Linux artifacts (arm64 + armv7l) and upload
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source at tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.version }}
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm ci --no-audit --no-fund || npm i --no-audit --no-fund

      - name: Inject build version (no commit)
        env:
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          jq --arg v "$VERSION" '.version=$v' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Effective build version:"
          cat package.json | jq '.version'

      - name: Install rpm tooling
        run: |
          sudo apt-get install -y rpm

      - name: Build (renderer + main/preload)
        run: npm run build

      - name: Package arm64 (AppImage, deb, rpm)
        run: npx electron-builder --linux AppImage deb rpm --arm64

      - name: Package armv7l (AppImage, deb, rpm; allow rpm failure)
        run: |
          set -e
          npx electron-builder --linux AppImage deb rpm --armv7l || {
            echo "armv7l rpm failed, retry without rpm"
            npx electron-builder --linux AppImage deb --armv7l
          }

      - name: List artifacts
        run: ls -1 dist || true

      - name: Upload artifacts to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.release.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find dist -maxdepth 1 -type f \( -name "*linux-*.AppImage" -o -name "*linux-*.deb" -o -name "*linux-*.rpm" \))
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No artifacts found."
            exit 1
          fi
          echo "Uploading: ${FILES[*]}"
          gh release upload "$VERSION" "${FILES[@]}" --