name: Build and Release (date-based version)

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  prepare_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.v.outputs.version }}
      tag: ${{ steps.v.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - id: v
        shell: bash
        run: |
          set -euo pipefail
          YEAR=$(date -u +%Y)
          M=$(date -u +%-m)
          PREFIX="$YEAR.$M."
          git fetch --tags --force || true
          LAST_INDEX=$(git tag -l "v${PREFIX}*" \
            | sed -E 's/^v[0-9]+\.[0-9]+\.([0-9]+)$/\1/' \
            | sort -n \
            | tail -n1)
          if [ -z "${LAST_INDEX:-}" ]; then LAST_INDEX=0; fi
          INDEX=$((LAST_INDEX + 1))
          VERSION="${YEAR}.${M}.${INDEX}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag=${VERSION}" >> "$GITHUB_OUTPUT"

  build:
    needs: prepare_version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: x64
            name: macOS Intel
            script: make:macos
          - os: macos-latest
            platform: darwin
            arch: arm64
            name: macOS Apple Silicon
            script: make:macos
          - os: windows-latest
            platform: win32
            arch: x64
            name: Windows x64
            script: make:windows
          - os: ubuntu-latest
            platform: linux
            arch: x64
            name: Linux x64
            script: make:linux
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            name: Raspberry Pi (ARM64)
            script: make:rpi
          - os: ubuntu-latest
            platform: linux
            arch: armv7l
            name: Raspberry Pi Legacy (ARM32)
            script: make:rpi-legacy
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-
      - run: pnpm install
      - if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg fakeroot rpm
      - name: Set package.json version (no commit)
        env:
          VERSION: ${{ needs.prepare_version.outputs.version }}
        run: |
          node -e "const fs=require('fs'); const p=require('./package.json'); p.version=process.env.VERSION; fs.writeFileSync('package.json', JSON.stringify(p, null, 2)+'\n')"
          echo "package.json version set to ${VERSION}"
      - run: pnpm run lint
      - run: pnpm run ${{ matrix.script }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-${{ matrix.arch }}
          path: out/make/**/*
          retention-days: 30

  release:
    needs: [build, prepare_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - run: ls -la artifacts/
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.deb" -exec cp {} release-assets/ \;
          find artifacts -name "*.rpm" -exec cp {} release-assets/ \;
          find artifacts -name "*.zip" -exec cp {} release-assets/ \;
          find artifacts -name "*.exe" -exec cp {} release-assets/ \;
          find artifacts -name "*Setup.exe" -exec cp {} release-assets/ \;
          find artifacts -name "*.yml" -exec cp {} release-assets/ \;
          find artifacts -name "*.yaml" -exec cp {} release-assets/ \;
          ls -la release-assets/
      - uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare_version.outputs.tag }}
          name: Release v${{ needs.prepare_version.outputs.tag }}
          body: |
            ## Automatic Release

            Version: v${{ needs.prepare_version.outputs.tag }}

            This release uses date-based versioning (YY.M.D.N).

            ### Supported Platforms:
            - macOS: `.zip` files for Intel and Apple Silicon
            - Windows: `.exe` installer
            - Linux x64: `.deb` and `.rpm` packages
            - Raspberry Pi OS: `.deb` packages for ARM64 and ARM32

            ### Installation:
            - macOS: Download and extract the `.zip` file
            - Windows: Run the `.exe` installer
            - Ubuntu/Debian: `sudo dpkg -i potential-potato_*.deb`
            - CentOS/RHEL/Fedora: `sudo rpm -i potential-potato_*.rpm`
            - Raspberry Pi: `sudo dpkg -i potential-potato_*_arm64.deb`
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
