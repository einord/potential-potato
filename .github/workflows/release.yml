name: Release on merge to main

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-linux:
    name: Build Linux AppImage artifacts (arm64 + armv7l)
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
      sha: ${{ steps.meta.outputs.sha }}
    steps:
      - name: Compute monthly version (YY.M.N) via GitHub API
        id: ver
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          YEAR=$(date -u +%y)
          MONTH=$(date -u +%-m 2>/dev/null || true)
          if [ -z "$MONTH" ]; then
            MONTH=$(date -u +%m | sed 's/^0//')
          fi
          PREFIX="${YEAR}.${MONTH}."
          # List existing matching tag refs via GitHub API and extract tag names
          TAGS=$(gh api repos/${GITHUB_REPOSITORY}/git/matching-refs/tags/${PREFIX} --jq '.[].ref' 2>/dev/null | sed -E 's#.*/##') || true
          if [ -n "${TAGS}" ]; then
            MAX=$(echo "${TAGS}" | awk -F'.' '$1!=""{print $3}' | sort -n | tail -n1)
            NEXT=$((MAX + 1))
          else
            NEXT=0
          fi
          VERSION="${YEAR}.${MONTH}.${NEXT}"
          echo "Computed version: ${VERSION}"
          echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"

      - name: Capture build metadata
        id: meta
        shell: bash
        run: |
          echo "sha=${GITHUB_SHA}" >> "${GITHUB_OUTPUT}"

      - name: Checkout source at merge commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm ci --no-audit --no-fund || npm i --no-audit --no-fund

      - name: Inject build version (no commit)
        env:
          VERSION: ${{ steps.ver.outputs.version }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          jq --arg v "$VERSION" '.version=$v' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Effective build version:"
          cat package.json | jq '.version'

      - name: Build (renderer + main/preload)
        run: npm run build

      - name: Package arm64 AppImage
        run: npx electron-builder --linux AppImage --arm64

      - name: Package armv7l AppImage
        run: npx electron-builder --linux AppImage --armv7l

      - name: List artifacts
        run: ls -1 dist || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts-${{ steps.ver.outputs.version }}
          path: |
            dist/*linux-*.AppImage
          if-no-files-found: error

  release:
    name: Create GitHub Release and upload artifacts
    needs: build-linux
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release (auto-creates tag)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.build-linux.outputs.version }}
          TARGET_SHA: ${{ needs.build-linux.outputs.sha }}
        run: |
          if gh release view "$VERSION" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            echo "Release $VERSION already exists."
          else
            gh release create "$VERSION" \
              --repo "$GITHUB_REPOSITORY" \
              --target "$TARGET_SHA" \
              --title "Potential Potato $VERSION" \
              --notes "Automated release $VERSION"
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts-${{ needs.build-linux.outputs.version }}
          path: artifacts

      - name: Upload artifacts to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.build-linux.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find artifacts -type f -maxdepth 1 -name "*" )
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No artifacts found to upload."
            exit 1
          fi
          echo "Uploading: ${FILES[*]}"
          gh release upload "$VERSION" "${FILES[@]}" --repo "$GITHUB_REPOSITORY" --
