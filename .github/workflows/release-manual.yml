{}
        run: |
          BUMP_TYPE="${{ github.event.inputs.bump }}"
          echo "Bumping version: $BUMP_TYPE"
          # Read current version
          CURRENT=$(node -p "require('./package.json').version")
          IFS='.' read -r MAJ MIN PAT <<< "$CURRENT"
          case "$BUMP_TYPE" in
            major)
              MAJ=$((MAJ + 1)); MIN=0; PAT=0;
              ;;
            minor)
              MIN=$((MIN + 1)); PAT=0;
              ;;
            patch|*)
              PAT=$((PAT + 1));
              ;;
          esac
          NEW_VERSION="$MAJ.$MIN.$PAT"
          node -e "const fs=require('fs'); const p=require('./package.json'); p.version='${NEW_VERSION}'; fs.writeFileSync('package.json', JSON.stringify(p, null, 2)+'\n')"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push version bump
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: release v${{ steps.bump.outputs.new_version }} [skip ci]"
          git push origin HEAD:${{ github.ref_name }}

  build:
    name: Build artifacts
    needs: bump_version
    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            platform: darwin
            arch: x64
            name: macOS Intel
            script: make:macos
          - os: macos-latest
            platform: darwin
            arch: arm64
            name: macOS Apple Silicon
            script: make:macos
          # Windows builds
          - os: windows-latest
            platform: win32
            arch: x64
            name: Windows x64
            script: make:windows
          # Linux builds
          - os: ubuntu-latest
            platform: linux
            arch: x64
            name: Linux x64
            script: make:linux
          # Raspberry Pi builds
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            name: Raspberry Pi (ARM64)
            script: make:rpi
          - os: ubuntu-latest
            platform: linux
            arch: armv7l
            name: Raspberry Pi Legacy (ARM32)
            script: make:rpi-legacy

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code (bumped)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        env:
          STORE_PATH: ${{ env.STORE_PATH }}
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install Linux build dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg fakeroot rpm

      - name: Lint code
        run: pnpm run lint

      - name: Build application
        run: pnpm run ${{ matrix.script }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-${{ matrix.arch }}
          path: |
            out/make/**/*
          retention-days: 30

  release:
    name: Create GitHub Release
    needs: [build, bump_version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.deb" -exec cp {} release-assets/ \;
          find artifacts -name "*.rpm" -exec cp {} release-assets/ \;
          find artifacts -name "*.zip" -exec cp {} release-assets/ \;
          find artifacts -name "*.exe" -exec cp {} release-assets/ \;
          find artifacts -name "*Setup.exe" -exec cp {} release-assets/ \;
          find artifacts -name "*.yml" -exec cp {} release-assets/ \;
          find artifacts -name "*.yaml" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.bump_version.outputs.new_version }}
          name: Release v${{ needs.bump_version.outputs.new_version }}
          body: |
            ## Automatic Release

            Version: v${{ needs.bump_version.outputs.new_version }}

            This release was automatically generated via manual workflow dispatch.

            ### Supported Platforms:
            - macOS: `.zip` files for Intel and Apple Silicon
            - Windows: `.exe` installer
            - Linux x64: `.deb` and `.rpm` packages
            - Raspberry Pi OS: `.deb` packages for ARM64 and ARM32

            ### Installation:
            - macOS: Download and extract the `.zip` file
            - Windows: Run the `.exe` installer
            - Ubuntu/Debian: `sudo dpkg -i potential-potato_*.deb`
            - CentOS/RHEL/Fedora: `sudo rpm -i potential-potato_*.rpm`
            - Raspberry Pi: `sudo dpkg -i potential-potato_*_arm64.deb`
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
